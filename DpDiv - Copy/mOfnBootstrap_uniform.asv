load('n200_uniform_size_1000.mat')
%doublebootstrap
%N=10000
%M=2000 (1000 each class)

dpvals=fulldpdata(:,47);
dpbar=mean(dpvals);
bs_dpmeans=zeros(1,50);
 for jj = 1:numTrials
            %Monte Carlo sampling done here WITHOUT REPLACEMENT M<N
            %bootstrap
            
            %datasample uses randperm.m (in built) to choose vales
            f0=datasample(data1(:,:,1),currSampSize,'Replace',false);
            f1=datasample(data1(:,:,2),currSampSize,'Replace',false);
            
            dp_data1(ii,jj)=Dp_div(f0,f1);
            
        end

CI_double_bs=[prctile(bs_dpmeans,2.5) prctile(bs_dpmeans,97.5)]
%--------------------------------------------------------------------------

CI_direct=[prctile(dpvals,2.5) prctile(dpvals,97.5)]

resids=dpbar-bs_dpmeans;
CI_sub=[dpbar-prctile(resids,97.5) dpbar-prctile(resids,2.5)]

[f xi]=ksdensity(bs_dpmeans);
figure (1)

plot(xi,f)

grid on
hold on





% dp_sdev = std(dp_m);%/sqrt(length(dp_m));
% test_distr=mean(dp_m)+dp_sdev*randn(1,10000);
% [f1 xi1]=ksdensity(test_distr);
% [h,p,ksstat]=kstest2(test_distr,dp_m)
% if(h==1)
%     disp('ERROR: Bootstrap distribution is NOT Gaussian!')
% else
   
% end
%take the m=250 (actually m=500, 250 from each class)

% CI95_Percent = [mean(dp_m)-1.96*dp_sdev mean(dp_m)+ 1.96*dp_sdev]
% hold on
% 
% plot(xi,f)  ;
% plot(xi1,f1);
